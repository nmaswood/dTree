{"version":3,"sources":["dTree.min.js","dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","DEBUG_LEVEL","debug","allNodes","_flatten","visibleNodes","_","filter","n","hidden","nodeSize","callbacks","nodeWidth","textRenderer","value","width","margin","left","right","height","top","bottom","zoom","d3","scaleExtent","on","svg","attr","event","transform","translate","select","append","call","tree","separation","a","b","data","_update","source","treenodes","links","linksvgs","selectAll","enter","l","noParent","styles","linage","_elbow","formatPercent","format","d","x","y","style","text","percentage","nodes","descendants","svgs","cWidth","cHeight","id","exclamations","_nodeRenderer","news","newsBox","exclamationGroups","exclamationHeight","exclamationOffset","recurse","node","children","forEach","push","ny","yDelta","maxHeight","tmpSvg","document","createElement","body","appendChild","map","container","HARD_CODED_CLASS","HARD_CODED_TEXT_CLASS","setAttribute","visibility","maxWidth","name","innerHTML","offsetHeight","removeChild","Math","max","depth","entries","0","1","2","3","4","numColors","keys","groups","depthToColorMap","location","info","textClass","msg","console","log","VERSION","init","options","arguments","undefined","defaultsDeep","nodeClick","extra","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","marriage","process","hierarchyData","hierarchy","treeBuilder","create","mapClass","label","person","company","mapTextClass","addStyle","class","merge","listOfAttributes","compactExtraInfo","pick","type","processFunction","bind","child"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function (n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes, opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var zoom = d3.zoom().scaleExtent([0.1, 10]).on('zoom', function () {\n          svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n        });\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height).call(zoom).append('g').attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n        // Compute the layout.\n        this.tree = d3.tree().nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\n\n        this.tree.separation(function separation(a, b) {\n          return a.data.hidden || b.data.hidden ? .3 : .6;\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var treenodes = this.tree(source);\n        var links = treenodes.links();\n\n        // Create the link lines.\n        var linksvgs = this.svg.selectAll('.link').data(links).enter()\n        // filter links with no parents to prevent empty nodes\n        .filter(function (l) {\n          return !l.target.data.noParent;\n        });\n\n        linksvgs.append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var formatPercent = d3.format('.0%');\n        linksvgs.append('text').attr('x', function (d) {\n          var source = d.source;\n          var target = d.target;\n          return target.x + 'px';\n        }).attr('y', function (d) {\n          var source = d.source;\n          var target = d.target;\n          return d.target.y - 47 + 'px';\n        }).style('fill', 'gray').attr('font-family', 'Source Sans Pro, sans-serif').attr('font-weight', 800).attr('font-size', '10px').attr('text-anchor', 'middle').text(function (d) {\n          var source = d.source;\n          var target = d.target;\n          var percentage = target.data.percentage;\n          return formatPercent(percentage);\n        });\n\n        var nodes = this.svg.selectAll('.node').data(treenodes.descendants()).enter();\n\n        // Create the node svgs.\n        var svgs = nodes.append('svg').filter(function (d) {\n          return d.data.hidden ? false : true;\n        }).attr('x', function (d) {\n          return d.x - d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y - d.cHeight / 2 + 'px';\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).attr('id', function (d) {\n          return d.id;\n        });\n        var groups = TreeBuilder._nodeRenderer(svgs);\n\n        var exclamations = this.svg.selectAll('.news-exclamation').data(treenodes.descendants()).enter()\n        // filter links with no parents to prevent empty nodes\n        .filter(function (d) {\n          return d.data.news != null;\n        });\n\n        exclamations.append('text').attr('class', 'fas fa-exclamation-circle').attr('x', function (d) {\n          return d.x + 30 + 'px';\n        }).attr('y', function (d) {\n          return d.y - d.cHeight / 2 + 9 + 'px';\n        }).style('cursor', 'pointer').attr('fill', 'black').attr('font-size', function (d) {\n          return '1.5em';\n        }).text(function (d) {\n          return '';\n        }).on('mouseover', function (d) {\n          var newsBox = d3.select('#news-box-' + d.data.id);\n          newsBox.style('visibility', 'visible');\n        }).on('mouseout', function (d) {\n          var newsBox = d3.select('#news-box-' + d.data.id);\n          newsBox.style('visibility', 'hidden');\n        });\n\n        var exclamationGroups = exclamations.append('g').attr('width', '500px').attr('height', '500px').attr('x', function (d) {\n          return d.x - d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y - d.cHeight / 2 + 'px';\n        })\n        //j.attr('visibility', 'hidden')\n        .attr('id', function (d) {\n          return 'news-box-' + d.data.id;\n        });\n\n        var exclamationHeight = 80;\n        var exclamationOffset = 60;\n        exclamationGroups.append('rect').attr('class', 'news-box').attr('fill', '#ecf0f1').attr('width', '80px').attr('height', exclamationHeight + 'px').attr('x', function (d) {\n          return d.x + d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y - exclamationOffset + 'px';\n        }).attr('stroke', 'black').attr('stroke-width', 2);\n\n        exclamationGroups.append('text').attr('width', '80px').attr('x', function (d) {\n          return d.x + d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y + 'px';\n        }).text('hello world');\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.data.noParent) {\n          return 'M0,0L0,0';\n        }\n\n        // seperation of nodes height\n        var ny = d.target.y + (d.source.y - d.target.y) * 1;\n        var yDelta = -20;\n\n        return 'M ' + d.target.x + ' ' + d.target.y + ('l ' + 0 + ' ' + yDelta * 2) + ('m ' + 0 + ' ' + yDelta) + ('L ' + d.target.x + ' ' + ny) + ('L ' + d.source.x + ' ' + d.source.y) + '';\n      }\n    }], [{\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        var tmpSvg = document.createElement('svg');\n        document.body.appendChild(tmpSvg);\n        _.map(nodes, function (n) {\n          var container = document.createElement('div');\n          var HARD_CODED_CLASS = 'man' || n.data['class'];\n          var HARD_CODED_TEXT_CLASS = 'nice' || n.data.textClass;\n\n          container.setAttribute('class', HARD_CODED_CLASS);\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.data.name, n.data.data, HARD_CODED_TEXT_CLASS);\n          container.innerHTML = text;\n\n          tmpSvg.appendChild(container);\n          var height = container.offsetHeight;\n          tmpSvg.removeChild(container);\n\n          maxHeight = Math.max(maxHeight, height);\n          n.cHeight = height;\n\n          n.cWidth = n.data.hidden ? 0 : width;\n        });\n        document.body.removeChild(tmpSvg);\n\n        return [width, maxHeight];\n      }\n    }, {\n      key: 'depthToColorMap',\n      value: function depthToColorMap(depth) {\n        var entries = {\n          0: '#e74c3c',\n          1: '#a29bfe',\n          2: '#0984e3',\n          3: '#fab1a0',\n          4: '#636e72'\n        };\n\n        var numColors = Object.keys(entries).length;\n        return entries[depth % numColors];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(nodes) {\n        var groups = nodes.append('g').attr('x', function (d) {\n          return d.x;\n        }).attr('y', function (d) {\n          return d.y;\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        });\n\n        var rects = groups.append('rect').attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).style('fill', function (d) {\n          return TreeBuilder.depthToColorMap(d.depth);\n        });\n\n        groups.append('text').attr('x', function (d) {\n          return d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.cHeight / 2 + 'px';\n        }).style('fill', 'white').attr('font-family', 'Source Sans Pro, sans-serif').attr('font-weight', 800).attr('font-size', '10px').attr('text-decoration', 'underline').attr('text-anchor', 'middle').text(function (d) {\n          return d.data.name;\n        });\n\n        groups.append('text').attr('x', function (d) {\n          return d.cWidth / 2 + 'px';\n        }).attr('y', function (d) {\n          return 10 + d.cHeight / 2 + 'px';\n        }).style('fill', 'white').attr('font-family', 'Source Sans Pro, sans-serif').attr('font-weight', 800).attr('font-size', '6px').attr('text-anchor', 'middle').text(function (d) {\n          return d.data.location;\n        });\n        return groups;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, info, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n\n        if (info.percentage && info.percentage != 'N/A') {\n          node += '<p align=\"center\" class=\"' + textClass + '\"> ' + info.percentage + '% </p>';\n        }\n\n        if (info.location) {\n          node += '<p align=\"center\" class=\"' + textClass + '\"> ' + info.location + ' </p>';\n        }\n\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '2.0.2',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 50,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      this.process(data);\n      var hierarchyData = d3.hierarchy(data);\n      var treeBuilder = new TreeBuilder(hierarchyData, [], opts);\n      treeBuilder.create();\n    },\n    mapClass: function mapClass(label) {\n      var d = {\n        'person': 'person',\n        'company': 'company'\n      };\n\n      return d[label];\n    },\n\n    mapTextClass: function mapTextClass(label) {\n      var d = {\n        'person': 'person-text',\n        'company': 'company-text'\n      };\n      return d[label];\n    },\n\n    addStyle: function addStyle(nodes, label) {\n      var style = {\n        'class': this.mapClass(label),\n        textClass: this.mapTextClass(label)\n      };\n\n      _.merge(nodes, style);\n    },\n\n    listOfAttributes: ['percentage', 'location', 'gender', 'news'],\n\n    compactExtraInfo: function compactExtraInfo(nodes, listOfAttributes) {\n      nodes.data = _.pick(nodes, listOfAttributes);\n    },\n\n    process: function process(nodes) {\n\n      if (!nodes) {\n        return;\n      }\n\n      var label = nodes.type;\n\n      this.addStyle(nodes, label);\n      this.compactExtraInfo(nodes, this.listOfAttributes);\n\n      var processFunction = this.process.bind(this);\n\n      (nodes.children || []).forEach(function (child) {\n        processFunction(child);\n      });\n    }\n  };\n\n  return dTree;\n});\n//# sourceMappingURL=dTree.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.dTree = factory());\n}(this, (function () { 'use strict';\n\nclass TreeBuilder {\n\n  constructor(root, siblings, opts) {\n    TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n    this.root = root;\n    this.siblings = siblings;\n    this.opts = opts;\n\n    // flatten nodes\n    this.allNodes = this._flatten(this.root);\n\n    // Calculate node size\n    let visibleNodes = _.filter(this.allNodes, function(n) {\n      return !n.hidden;\n    });\n    this.nodeSize = opts.callbacks.nodeSize(visibleNodes,\n      opts.nodeWidth, opts.callbacks.textRenderer);\n  }\n\n  create() {\n\n    let opts = this.opts;\n    let allNodes = this.allNodes;\n    let nodeSize = this.nodeSize;\n\n    let width = opts.width + opts.margin.left + opts.margin.right;\n    let height = opts.height + opts.margin.top + opts.margin.bottom;\n\n    let zoom = d3.zoom()\n      .scaleExtent([0.1, 10])\n      .on('zoom', function() {\n        svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n      });\n\n    //make an SVG\n    let svg = this.svg = d3.select(opts.target)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .call(zoom)\n      .append('g')\n      .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n    // Compute the layout.\n    this.tree = d3.tree()\n      .nodeSize([nodeSize[0] * 2, nodeSize[1] * 2.5]);\n\n    this.tree.separation(function separation(a, b) {\n      return (a.data.hidden || b.data.hidden) ? .3 : .6;\n    });\n\n    this._update(this.root);\n  }\n\n  _update(source) {\n\n    let opts = this.opts;\n    let allNodes = this.allNodes;\n    let nodeSize = this.nodeSize;\n\n    let treenodes = this.tree(source);\n    let links = treenodes.links();\n\n    // Create the link lines.\n    const linksvgs = this.svg.selectAll('.link')\n      .data(links)\n      .enter()\n      // filter links with no parents to prevent empty nodes\n      .filter(function(l) {\n        return !l.target.data.noParent;\n      });\n\n    linksvgs\n      .append('path')\n      .attr('class', opts.styles.linage)\n      .attr('d', this._elbow);\n\n    var formatPercent = d3.format('.0%');\n    linksvgs\n      .append('text')\n      .attr('x', function(d) {\n        const source = d.source;\n        const target = d.target;\n        return `${target.x}px`;\n      })\n      .attr('y', function(d) {\n        const source = d.source;\n        const target = d.target;\n        return `${d.target.y - 47}px`;\n      })\n      .style('fill', 'gray')\n      .attr('font-family', 'Source Sans Pro, sans-serif')\n      .attr('font-weight', 800)\n      .attr('font-size', '10px')\n      .attr('text-anchor', 'middle')\n      .text(function(d) {\n        const source = d.source;\n        const target = d.target;\n        const percentage = target.data.percentage;\n        return formatPercent(percentage);\n      });\n\n    let nodes = this.svg.selectAll('.node')\n      .data(treenodes.descendants())\n      .enter();\n\n    // Create the node svgs.\n    let svgs = nodes.append('svg')\n      .filter(function(d) {\n        return d.data.hidden ? false : true;\n      })\n      .attr('x', function(d) {\n        return d.x - d.cWidth / 2 + 'px';\n      })\n      .attr('y', function(d) {\n        return d.y - d.cHeight / 2 + 'px';\n      })\n      .attr('width', function(d) {\n        return d.cWidth + 'px';\n      })\n      .attr('height', function(d) {\n        return d.cHeight + 'px';\n      })\n      .attr('id', function(d) {\n        return d.id;\n      });\n    const groups = TreeBuilder._nodeRenderer(svgs);\n\n    const exclamations = this.svg.selectAll('.news-exclamation')\n      .data(treenodes.descendants())\n      .enter()\n      // filter links with no parents to prevent empty nodes\n      .filter(function(d) {\n        return d.data.news != null;\n      });\n\n    exclamations.append('text')\n      .attr('class', 'fas fa-exclamation-circle')\n      .attr('x', function(d) {\n        return d.x + 30 + 'px';\n      })\n      .attr('y', function(d) {\n        return d.y - d.cHeight / 2 + 9 + 'px';\n      })\n      .style('cursor', 'pointer')\n      .attr('fill', 'black')\n      .attr('font-size', function(d) { return '1.5em'; })\n      .text(function(d) { return '\\uf06a'; })\n      .on('mouseover', function(d) {\n        const newsBox = d3.select(`#news-box-${d.data.id}`);\n        newsBox.style('visibility', 'visible');\n      })\n      .on('mouseout', function(d) {\n        const newsBox = d3.select(`#news-box-${d.data.id}`);\n        newsBox.style('visibility', 'hidden');\n      });\n\n    const exclamationGroups = exclamations.append('g')\n      .attr('width', `500px`)\n      .attr('height',`500px`)\n      .attr('x', function(d) {\n        return d.x - d.cWidth / 2 + 'px';\n      })\n      .attr('y', function(d) {\n        return d.y - d.cHeight / 2 + 'px';\n      })\n      //j.attr('visibility', 'hidden')\n      .attr('id', function(d) {\n        return `news-box-${d.data.id}`;\n      });\n\n    const exclamationHeight = 80;\n    const exclamationOffset = 60;\n    exclamationGroups.append('rect')\n      .attr('class', 'news-box')\n      .attr('fill', '#ecf0f1')\n      .attr('width', `80px`)\n      .attr('height',`${exclamationHeight}px`)\n      .attr('x', function(d) {\n        return d.x + d.cWidth / 2 + 'px';\n      })\n      .attr('y', function(d) {\n        return d.y - exclamationOffset + 'px';\n      })\n      .attr('stroke', 'black')\n      .attr('stroke-width', 2);\n\n    exclamationGroups.append('text')\n      .attr('width', `80px`)\n      .attr('x', function(d) {\n        return d.x + d.cWidth / 2 + 'px';\n      })\n      .attr('y', function(d) {\n        return d.y + 'px';\n      })\n      .text('hello world');\n  }\n\n  _flatten(root) {\n    let n = [];\n    let i = 0;\n\n    function recurse(node) {\n      if (node.children) {\n        node.children.forEach(recurse);\n      }\n      if (!node.id) {\n        node.id = ++i;\n      }\n      n.push(node);\n    }\n    recurse(root);\n    return n;\n  }\n\n  _elbow(d, i) {\n    if (d.target.data.noParent) {\n      return 'M0,0L0,0';\n    }\n\n    // seperation of nodes height\n    let ny = d.target.y + (d.source.y - d.target.y) * 1;\n    const yDelta = -20;\n\n    return `M ${d.target.x} ${d.target.y}` +\n           `l ${0} ${yDelta * 2}` +\n           `m ${0} ${yDelta}` +\n           `L ${d.target.x} ${ny}` +\n           `L ${d.source.x} ${d.source.y}` +\n           ``;\n  }\n\n  static _nodeSize(nodes, width, textRenderer) {\n    let maxWidth = 0;\n    let maxHeight = 0;\n    let tmpSvg = document.createElement('svg');\n    document.body.appendChild(tmpSvg);\n    _.map(nodes, function(n) {\n      let container = document.createElement('div');\n      const HARD_CODED_CLASS = 'man' || n.data.class;\n      const HARD_CODED_TEXT_CLASS = 'nice' || n.data.textClass;\n\n      container.setAttribute('class', HARD_CODED_CLASS);\n      container.style.visibility = 'hidden';\n      container.style.maxWidth = `${width}px`;\n\n      let text = textRenderer(n.data.name, n.data.data, HARD_CODED_TEXT_CLASS);\n      container.innerHTML = text;\n\n      tmpSvg.appendChild(container);\n      let height = container.offsetHeight;\n      tmpSvg.removeChild(container);\n\n      maxHeight = Math.max(maxHeight, height);\n      n.cHeight = height;\n\n      n.cWidth = n.data.hidden ? 0 : width;\n    });\n    document.body.removeChild(tmpSvg);\n\n    return [width, maxHeight];\n  }\n\n  static depthToColorMap(depth) {\n    const entries = {\n      0: '#e74c3c',\n      1: '#a29bfe',\n      2: '#0984e3',\n      3: '#fab1a0',\n      4: '#636e72',\n    };\n\n    const numColors = Object.keys(entries).length;\n    return entries[depth % numColors];\n  }\n\n  static _nodeRenderer(nodes) {\n    const groups = nodes\n      .append('g')\n      .attr('x', function(d) {return d.x;})\n      .attr('y', function(d) {return d.y;})\n      .attr('width', function(d) {\n        return d.cWidth + 'px';\n      })\n      .attr('height', function(d) {\n        return d.cHeight + 'px';\n      });\n\n    const rects = groups\n      .append('rect')\n      .attr('width', function(d) {\n        return d.cWidth + 'px';\n      })\n      .attr('height', function(d) {\n        return d.cHeight + 'px';\n      })\n      .style('fill', function(d) {\n        return TreeBuilder.depthToColorMap(d.depth);\n      });\n\n    groups.append('text')\n      .attr('x', function(d) {\n        return `${d.cWidth / 2}px`;\n      })\n      .attr('y', function(d) {\n        return `${d.cHeight / 2}px`;\n      })\n      .style('fill', 'white')\n      .attr('font-family', 'Source Sans Pro, sans-serif')\n      .attr('font-weight', 800)\n      .attr('font-size', '10px')\n      .attr('text-decoration', 'underline')\n      .attr('text-anchor', 'middle')\n      .text(function(d) {\n        return d.data.name;\n      });\n\n    groups.append('text')\n      .attr('x', function(d) {\n        return `${d.cWidth / 2}px`;\n      })\n      .attr('y', function(d) {\n        return `${10 + d.cHeight / 2}px`;\n      })\n      .style('fill', 'white')\n      .attr('font-family', 'Source Sans Pro, sans-serif')\n      .attr('font-weight', 800)\n      .attr('font-size', '6px')\n      .attr('text-anchor', 'middle')\n      .text(function(d) {\n        return d.data.location;\n      });\n    return groups;\n  }\n\n  static _textRenderer(name, info, textClass) {\n    let node = '';\n    node += '<p ';\n    node += 'align=\"center\" ';\n    node += 'class=\"' + textClass + '\">\\n';\n    node += name;\n    node += '</p>\\n';\n\n    if (info.percentage && info.percentage != 'N/A') {\n      node += `<p align=\"center\" class=\"${textClass}\"> ${info.percentage}% </p>`;\n    }\n\n    if (info.location) {\n      node += `<p align=\"center\" class=\"${textClass}\"> ${info.location} </p>`;\n    }\n\n    return node;\n  }\n\n  static _debug(msg) {\n    if (TreeBuilder.DEBUG_LEVEL > 0) {\n      console.log(msg);\n    }\n  }\n}\n\nconst dTree = {\n\n  VERSION: '2.0.2',\n\n  init: function(data, options = {}) {\n\n    var opts = _.defaultsDeep(options || {}, {\n      target: '#graph',\n      debug: false,\n      width: 600,\n      height: 600,\n      callbacks: {\n        nodeClick: function(name, extra, id) {},\n        nodeSize: function(nodes, width, textRenderer) {\n          return TreeBuilder._nodeSize(nodes, width, textRenderer);\n        },\n        nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\n        textRenderer: function(name, extra, textClass) {\n          return TreeBuilder._textRenderer(name, extra, textClass);\n        },\n      },\n      margin: {\n        top: 50,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      nodeWidth: 100,\n      styles: {\n        node: 'node',\n        linage: 'linage',\n        marriage: 'marriage',\n        text: 'nodeText'\n      }\n    });\n\n    this.process(data);\n    const hierarchyData = d3.hierarchy(data);\n    const treeBuilder = new TreeBuilder(hierarchyData, [], opts);\n    treeBuilder.create();\n  },\n  mapClass: function(label) {\n    const d = {\n      'person': 'person',\n      'company': 'company'\n    };\n\n    return d[label];\n  },\n\n  mapTextClass: function(label) {\n    const d = {\n      'person': 'person-text',\n      'company': 'company-text'\n    };\n    return d[label];\n  },\n\n  addStyle: function(nodes, label) {\n    const style = {\n      class: this.mapClass(label),\n      textClass: this.mapTextClass(label)\n    };\n\n    _.merge(nodes, style);\n  },\n\n  listOfAttributes: ['percentage', 'location', 'gender', 'news'],\n\n  compactExtraInfo: function(nodes, listOfAttributes) {\n    nodes.data = _.pick(nodes, listOfAttributes);\n  },\n\n  process: function(nodes) {\n\n    if (!nodes) {\n      return;\n    }\n\n    const label = nodes.type;\n\n    this.addStyle(nodes, label);\n    this.compactExtraInfo(nodes, this.listOfAttributes);\n\n    const processFunction = this.process.bind(this);\n\n    (nodes.children || []).forEach(function(child) {\n      processFunction(child);\n    });\n  }\n};\n\nreturn dTree;\n\n})));\n"]}